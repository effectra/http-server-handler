<?php

namespace Effectra\Http\Server;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\RequestHandlerInterface;

/**
 * Class RequestHandler
 *
 * Handles an HTTP request by processing a stack of middlewares.
 */
class RequestHandler implements RequestHandlerInterface
{
    private ?ServerRequestInterface $lastRequest = null;

    /**
     * RequestHandler constructor.
     * @param ResponseInterface $response The response passed after middlewares
     * @param array $stack The stack of middlewares.
     */
    public function __construct(
        protected ResponseInterface $response,
        protected array $stack = []
    ) {
        $this->stack = $stack;
    }

    /**
     * Handles the server request by processing the middlewares stack.
     *
     * @param ServerRequestInterface $request The server request to handle.
     * @return ResponseInterface The response generated by the middlewares stack.
     */
    public function handle(ServerRequestInterface $request): ResponseInterface
    {
        $this->lastRequest = $request;
        if (count($this->stack) > 0) {
            $middleware = array_shift($this->stack);
            $response = $middleware->process($request, $this);
            return $response;
        }

        return $this->response;
    }

    /**
     * Get the last request processed by the middleware stack.
     *
     * @return ServerRequestInterface|null The last request or null if no request has been processed.
     */
    public function getLastRequest(): ?ServerRequestInterface
    {
        return $this->lastRequest;
    }
}
